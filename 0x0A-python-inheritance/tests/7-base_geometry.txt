The ``7-base_geometry`` module
============================

Using ``BaseGeometry``
------------------

import ``BaseGeometry`` from the ``7-base_geometry`` module:
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	
Creating an object of type BaseGeometry:

	>>> bg = BaseGeometry()

Test if correct type:

	>>> type(bg) == BaseGeometry
	True

Test isinstance:

	>>> isinstance(bg, BaseGeometry)
	True

Test if integer_validator is an instance method:

	>>> type(BaseGeometry.__dict__['integer_validator'])
	<class 'function'>


Test if area is an instance method:

	>>> type(BaseGeometry.__dict__['area'])
	<class 'function'>

Test area method called via class with no args:
    >>> bg.__class__.area()
    Traceback (most recent call last):
    TypeError: BaseGeometry.area() missing 1 required positional argument: 'self'

Test integer_validator method arg test (3 args):
    >>> bg.integer_validator(1, 1, 1)
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

Test area():

	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

	>>> bg.area(1)
	Traceback (most recent call last):
	TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Test integer_validator method called via class with no args:
    >>> bg.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

Test with valid args:

	>>> bg.integer_validator("my_int", 12)

	>>> bg.integer_validator("width", 89)

Test with no args:

	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test with one argument:

	>>> bg.integer_validator("name")
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Passing non-string types as name:

	>>> bg.integer_validator(None, 3)

	>>> bg.integer_validator(4, 3)

	>>> bg.integer_validator(7.8, 3)

	>>> bg.integer_validator([], 3)

Passing non-integer types as value:

	>>> bg.integer_validator("name", None)
	Traceback (most recent call last):
	TypeError: name must be an integer

	>>> bg.integer_validator("name", 3.55)
	Traceback (most recent call last):
	TypeError: name must be an integer

	>>> bg.integer_validator("name", "str")
	Traceback (most recent call last):
	TypeError: name must be an integer

	>>> bg.integer_validator("name", [])
	Traceback (most recent call last):
	TypeError: name must be an integer

Passing negeative values or zero as value:

	>>> bg.integer_validator("name", -4)
	Traceback (most recent call last):
	ValueError: name must be greater than 0

	>>> bg.integer_validator("name", -30)
	Traceback (most recent call last):
	ValueError: name must be greater than 0

	>>> bg.integer_validator("name", -2000000)
	Traceback (most recent call last):
	ValueError: name must be greater than 0

	>>> bg.integer_validator("name", 0)
	Traceback (most recent call last):
	ValueError: name must be greater than 0	
integer_validator method float.0 value:
    >>> bg.integer_validator("foo", 3.0)
    Traceback (most recent call last):
    TypeError: foo must be an integer

integer_validator method float.x value:
    >>> bg.integer_validator("arg", 3.14)
    Traceback (most recent call last):
    TypeError: arg must be an integer

integer_validator method string value:
    >>> bg.integer_validator("Bar", "bar")
    Traceback (most recent call last):
    TypeError: Bar must be an integer

integer_validator method bool value:
    >>> bg.integer_validator("zar", True)
    Traceback (most recent call last):
    TypeError: zar must be an integer

integer_validator method list value:
    >>> bg.integer_validator("a", [1])
    Traceback (most recent call last):
    TypeError: a must be an integer

integer_validator method None value:
    >>> bg.integer_validator("foo", None)
    Traceback (most recent call last):
    TypeError: foo must be an integer

integer_validator method 0 value:
    >>> bg.integer_validator("key", 0)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

integer_validator method negative value:
    >>> bg.integer_validator("key", -1000)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

integer_validator method ok value:
    >>> bg.integer_validator("key", 98)
    
integer_validator method ok value 2:
    >>> bg.integer_validator("key", 1)

integer_validator method empty string:
    >>> bg.integer_validator("", 1)

integer_validator method empty string:
    >>> bg.integer_validator(None, 1)

integer_validator method tuple:
    >>> bg.integer_validator("Foo", (1, 2))
    Traceback (most recent call last):
    TypeError: Foo must be an integer

integer_validator method dic:
    >>> bg.integer_validator("Foo", {1, 2})
    Traceback (most recent call last):
    TypeError: Foo must be an integer
