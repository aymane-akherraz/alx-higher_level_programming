The ``1-my_list`` module
============================

Using ``1-mylist``
------------------

import ``MyList`` from the ``1-my_list`` module:

	>>> MyList = __import__('1-my_list').MyList

Test if correct type:

	>>> my_list = MyList()
	>>> type(my_list) == MyList
	True

Test isinstance:

	>>> isinstance(my_list, MyList)
	True

Test if print_sorted is an instance method:

	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Test print_sorted method called via class with no args:
    >>> my_list.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

Test if MyList inherits from list:

	>>> print(issubclass(MyList, list))
	True

Test with 0 and positive integers:
	>>> my_list = MyList()
	>>> my_list.append(2)
	>>> my_list.append(4)
	>>> my_list.append(0)
	>>> my_list.append(3)
	>>> my_list.append(1)
	>>> my_list.print_sorted()
	[0, 1, 2, 3, 4]

Test with 0 and negative values:

	>>> my_list = MyList()
	>>> my_list.append(-2)
	>>> my_list.append(0)
	>>> my_list.append(-9)
	>>> my_list.append(-1)
	>>> my_list.append(-90)
	>>> my_list.print_sorted()
	[-90, -9, -2, -1, 0]


Test with positive integers:

	>>> my_list = MyList()
	>>> my_list.append(10)
	>>> my_list.append(3)
	>>> my_list.append(40)
	>>> my_list.append(5)
	>>> my_list.append(9)
	>>> my_list.print_sorted()
	[3, 5, 9, 10, 40]

Test with negative values:

	>>> my_list = MyList()
	>>> my_list.append(-2)
	>>> my_list.append(-7)
	>>> my_list.append(-9)
	>>> my_list.append(-1)
	>>> my_list.append(-90)
	>>> my_list.print_sorted()
	[-90, -9, -7, -2, -1]

Test with positive, negative and 0:

	>>> my_list = MyList()
	>>> my_list.append(0)
	>>> my_list.append(-9)
	>>> my_list.append(8)
	>>> my_list.append(-4)
	>>> my_list.append(3)
	>>> my_list.print_sorted()
	[-9, -4, 0, 3, 8]

Test with one element:
	
	>>> my_list = MyList()
	>>> my_list.append(0)
	>>> my_list.print_sorted()
	[0]

Test with mixed list:

	>>> my_list = MyList()
	>>> my_list.append(5)
	>>> my_list.append("H")
	>>> my_list.append(3.3)
	>>> my_list.append(-4)
	>>> my_list.append(0)
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: '<' not supported between instances of 'str' and 'int'

Test with None:

	>>> my_list = MyList()
	>>> my_list.append(None)
	>>> my_list.print_sorted()
	[None]

Test with a list of None:

	>>> my_list = MyList()
	>>> my_list.append(None)
	>>> my_list.append(None)
	>>> my_list.append(None)
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: '<' not supported between instances of 'NoneType' and 'NoneType'

Test with empty list:

	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

Test with empty lists:

	>>> my_list = MyList()
	>>> my_list.append([])
	>>> my_list.append([])
	>>> my_list.print_sorted()
	[[], []]

Test with a list of one element:

	>>> my_list = MyList()
	>>> my_list.append([4])
	>>> my_list.append([-8])
	>>> my_list.append([0])
	>>> my_list.print_sorted()
	[[-8], [0], [4]]

Test with list of lists:

	>>> my_list = MyList()
	>>> my_list.append([4])
	>>> my_list.append([-4, [None]])
	>>> my_list.append([-9, 0])
	>>> my_list.print_sorted()
	[[-9, 0], [-4, [None]], [4]]

Test with an already sorted list:
	
	>>> my_list = MyList()
	>>> my_list.append(-9)
	>>> my_list.append(-3)
	>>> my_list.append(0)
	>>> my_list.append(1)
	>>> my_list.append(10)
	>>> my_list.print_sorted()
	[-9, -3, 0, 1, 10]

Test with no args:

	>>> MyList.print_sorted()
	Traceback (most recent call last):
	TypeError: MyList.print_sorted() missing 1 required positional argument: 'self'


	
